iptables 基本命令
  首先介绍iptables的结构：iptables -> Tables -> Chains -> Rules. 简单地讲，tables由chains组成，而chains又由rules组成。如
  一、iptables的表与链
  iptables具有Filter, NAT, Mangle, Raw四种内建表：
  1. Filter表
    Filter表示iptables的默认表，因此如果你没有自定义表，那么就默认使用filter表，它具有以下三种内建链：
    INPUT链 – 处理来自外部的数据。
    OUTPUT链 – 处理向外发送的数据。
    FORWARD链 – 将数据转发到本机的其他网卡设备上。
    
  2. NAT表
  NAT表有三种内建链：
   PREROUTING链 处理刚到达本机并在路由转发前的数据包。它会转换数据包中的目标IP地址（destination ip address），通常用于DNAT(destination NAT)。
   POSTROUTING链  处理即将离开本机的数据包，他会转化数据包中的源地址（source ip address），通常用于SNAT（source NAT）。
   OUTPUT链 – 处理本机产生的数据包。
 
 3. Mangle表
    Mangle表用于指定如何处理数据包 它能改变TCP头中的QoS位。Mangle表具有5个内建链：
    PREROUTING
    OUTPUT
    FORWARD
    INPUT
    POSTROUTING
  4. Raw表
  Raw表用于处理异常，它具有2个内建链：
  PREROUTING chain
  OUTPUT chain
  
  下图展示了iptables的三个内建表：
  
   二、IPTABLES 规则(Rules)
    牢记以下三点式理解iptables规则的关键：
       Rules包括一个条件和一个目标(target)
       如果满足条件，就执行目标(target)中的规则或者特定值。
       如果不满足条件，就判断下一条Rules。
    目标值（Target Values）
    下面是你可以在target里指定的特殊值：
    ACCEPT – 允许防火墙接收数据包
    DROP – 防火墙丢弃包
    QUEUE – 防火墙将数据包移交到用户空间
    RETURN – 防火墙停止执行当前链中的后续Rules，并返回到调用链(the calling chain)中。
    
    如果你执行iptables --list你将看到防火墙上的可用规则
     iptables -t filter --list 
     查看mangle表：
# iptables -t mangle --list
查看NAT表：
# iptables -t nat --list
查看RAW表：
# iptables -t raw --list
1.语法
iptables -A chain firewall-rule
-A chain – 指定要追加规则的链
firewall-rule – 具体的规则参数
以下这些规则参数用于描述数据包的协议、源地址、目的地址、允许经过的网络接口，以及如何处理这些数据包。这些描述是对规则的基本描述。
-p 协议（protocol）
指定规则的协议，如tcp, udp, icmp等，可以使用all来指定所有协议。
如果不指定-p参数，则默认是all值。这并不明智，请总是明确指定协议名称。
可以使用协议名(如tcp)，或者是协议值（比如6代表tcp）来指定协议。映射关系请查看/etc/protocols
还可以使用–protocol参数代替-p参数

-s 源地址（source）
指定数据包的源地址
参数可以使IP地址、网络地址、主机名
例如：-s 192.168.1.101指定IP地址
例如：-s 192.168.1.10/24指定网络地址
如果不指定-s参数，就代表所有地址
还可以使用–src或者–source

-d 目的地址（destination）
指定目的地址
参数和-s相同
还可以使用–dst或者–destination

-j 执行目标（jump to target）
-j代表”jump to target”
-j指定了当与规则(Rule)匹配时如何处理数据包
可能的值是ACCEPT, DROP, QUEUE, RETURN，MASQUERADE
还可以指定其他链（Chain）作为目标
注：MASQUERADE，地址伪装，算是snat中的一种特例，可以实现自动化的snat（详情见上一篇文章）

-i 输入接口（input interface）
-i代表输入接口(input interface)
-i指定了要处理来自哪个接口的数据包
这些数据包即将进入INPUT, FORWARD, PREROUTE链
例如：-i eth0指定了要处理经由eth0进入的数据包
如果不指定-i参数，那么将处理进入所有接口的数据包
如果出现! -i eth0，那么将处理所有经由eth0以外的接口进入的数据包
如果出现-i eth+，那么将处理所有经由eth开头的接口进入的数据包
还可以使用–in-interface参数

-o 输出（out interface）
-o代表”output interface”
-o指定了数据包由哪个接口输出
这些数据包即将进入FORWARD, OUTPUT, POSTROUTING链
如果不指定-o选项，那么系统上的所有接口都可以作为输出接口
如果出现! -o eth0，那么将从eth0以外的接口输出
如果出现-i eth+，那么将仅从eth开头的接口输出
还可以使用–out-interface参数

–sport 源端口（source port）针对 -p tcp 或者 -p udp
 缺省情况下，将匹配所有端口
 可以指定端口号或者端口名称，例如”–sport 22″与”–sport ssh”。
 /etc/services文件描述了上述映射关系。
 从性能上讲，使用端口号更好
 使用冒号可以匹配端口范围，如”–sport 22:100″
 还可以使用”–source-port”
 
 –-dport 目的端口（destination port）针对-p tcp 或者 -p udp
  参数和–sport类似
  还可以使用”–destination-port”
  
-–tcp-flags TCP标志 针对-p tcp
可以指定由逗号分隔的多个参数
有效值可以是：SYN, ACK, FIN, RST, URG, PSH
可以使用ALL或者NONE

-–icmp-type ICMP类型 针对-p icmp
  –icmp-type 0 表示Echo Reply
  –icmp-type 8 表示Echo
  
  # 1.清空所有iptables规则 
iptables -F
2.接收目标端口为22的数据包
iptables -A INPUT -i eth0 -p tcp –dport 22 -j ACCEPT

 3.拒绝所有其他数据包
iptables -A INPUT -j DROP


1.SSH
1.允许接收远程主机的SSH请求 
iptables -A INPUT -i eth0 -p tcp –dport 22 -m state –state NEW,ESTABLISHED -j ACCEPT

2.允许发送本地主机的SSH响应
iptables -A OUTPUT -o eth0 -p tcp –sport 22 -m state –state ESTABLISHED -j ACCEPT

-m state: 启用状态匹配模块（state matching module）
  –-state: 状态匹配模块的参数。当SSH客户端第一个数据包到达服务器时，状态字段为NEW；建立连接后数据包的状态字段都是ESTABLISHED
  –sport 22: sshd监听22端口，同时也通过该端口和客户端建立连接、传送数据。因此对于SSH服务器而言，源端口就是22
   –dport 22: ssh客户端程序可以从本机的随机端口与SSH服务器的22端口建立连接。因此对于SSH客户端而言，目的端口就是22
如果服务器也需要使用SSH连接其他远程主机，则还需要增加以下配置：

# 1.送出的数据包目的端口为22 
iptables -A OUTPUT -o eth0 -p tcp –dport 22 -m state –state NEW,ESTABLISHED -j ACCEPT
# 2.接收的数据包源端口为22
iptables -A INPUT -i eth0 -p tcp –sport 22 -m state –state ESTABLISHED -j ACCEPT

2.HTTP
HTTP的配置与SSH类似：
# 1.允许接收远程主机的HTTP请求 
iptables -A INPUT -i eth0 -p tcp –dport 80 -m state –state NEW,ESTABLISHED -j ACCEPT
# 1.允许发送本地主机的HTTP响应
iptables -A OUTPUT -o eth0 -p tcp –sport 80 -m state –state ESTABLISHED -j ACCEPT

     
